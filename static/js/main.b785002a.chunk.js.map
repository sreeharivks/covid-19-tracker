{"version":3,"sources":["InfoBox.jsx","utils.js","Map.jsx","Table.jsx","LineGraph.jsx","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isCases","isRecovered","isDeaths","active","total","props","Card","onClick","className","CardContent","Typography","color","caseTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","caseType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","casesType","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","backgroundColor","borderColor","chartColor","setchartColor","useEffect","fetch","then","response","json","timeline","fetchData","length","datasets","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setmapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCaseType","filter","iso2","name","sortedData","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","charAt","toUpperCase","slice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b785002a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox({\r\n    title,\r\n    cases,\r\n    isCases,\r\n    isRecovered,\r\n    isDeaths,\r\n    active,\r\n    total,\r\n    ...props\r\n}) {\r\n    return (\r\n        <Card\r\n            onClick={props.onClick}\r\n            className={`infoBox ${active && 'infoBox--selected'} ${\r\n                isCases && 'infoBox--cases'\r\n            } ${isRecovered && 'infoBox--recovered'}  ${\r\n                isDeaths && 'infoBox--deaths'\r\n            }`}\r\n        >\r\n            <CardContent>\r\n                {/* Title  */}\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>\r\n                {/* Number of cases  */}\r\n                <h2\r\n                    className={`infoBox__cases ${isCases && 'infoBox--cases'} ${\r\n                        isRecovered && 'infoBox--recovered'\r\n                    }  ${isDeaths && 'infoBox--deaths'} `}\r\n                >\r\n                    {cases}\r\n                </h2>\r\n                {/* Total  */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    {total} Total\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\nconst caseTypeColors = {\r\n    cases: {\r\n        hex: '#CC1034',\r\n        multiplier: 800,\r\n    },\r\n    recovered: {\r\n        hex: '#7dd71d',\r\n        multiplier: 1200,\r\n    },\r\n    deaths: {\r\n        hex: '#fb4443',\r\n        multiplier: 2000,\r\n    },\r\n};\r\n\r\n// for sorting the data\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a, b) => b.cases - a.cases);\r\n};\r\n\r\n// draw circle on the map with interactive tooltips\r\nexport const showDataOnMap = (data, caseType = 'cases') =>\r\n    data.map((country) => (\r\n        <Circle\r\n            center={[country.countryInfo.lat, country.countryInfo.long]}\r\n            fillOpacity={0.4}\r\n            color={caseTypeColors[caseType].hex}\r\n            fillColor={caseTypeColors[caseType].hex}\r\n            radius={\r\n                Math.sqrt(country[caseType]) *\r\n                caseTypeColors[caseType].multiplier\r\n            }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div\r\n                        className=\"info-flag\"\r\n                        style={{\r\n                            backgroundImage: `url(${country.countryInfo.flag})`,\r\n                        }}\r\n                    ></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">\r\n                        Cases : {numeral(country.cases).format('0,0')}\r\n                    </div>\r\n                    <div className=\"info-recovered\">\r\n                        Recovered : {numeral(country.recovered).format('0,0')}\r\n                    </div>\r\n                    <div className=\"info-deaths\">\r\n                        Deaths : {numeral(country.deaths).format('0,0')}\r\n                    </div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ));\r\n\r\n// make the stats more prettier\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format('0,0')}` : '+0';\r\n","import React from 'react';\r\nimport './Map.css';\r\nimport { Map as LeafletMap, TileLayer } from 'react-leaflet';\r\nimport { showDataOnMap } from './utils';\r\n\r\nfunction Map({ countries, caseType, center, zoom }) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"https://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {/* Loop through and draw some circle on the map */}\r\n                {showDataOnMap(countries, caseType)}\r\n            </LeafletMap>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\nimport numeral from 'numeral';\r\n\r\nfunction Table({ countries }) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country, cases }) => (\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format('0,0')}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display: false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: 'index',\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function (tooltipItem, data) {\r\n                return numeral(tooltipItem.value).format('+0,0');\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: 'time',\r\n                time: {\r\n                    format: 'MM/DD/YY',\r\n                    tooltipFormat: 'll',\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks: {\r\n                    callback: function (value, index, values) {\r\n                        return numeral(value).format('0a');\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n};\r\n\r\nconst buildChartData = (data = 0, casesType = 'cases') => {\r\n    const chartData = [];\r\n    let lastDataPoint;\r\n    for (let date in data.cases) {\r\n        if (lastDataPoint) {\r\n            let newDataPoint = {\r\n                x: date,\r\n                y: data[casesType][date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = 'cases', country, ...props }) {\r\n    const [data, setData] = useState();\r\n    const [chartColor, setchartColor] = useState({\r\n        backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n        borderColor: '#CC1034',\r\n    });\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch(\r\n                country === 'worldwide'\r\n                    ? 'https://disease.sh/v3/covid-19/historical/all?lastdays=120'\r\n                    : `https://disease.sh/v3/covid-19/historical/${country}?lastdays=120`\r\n            )\r\n                .then((response) => {\r\n                    return response.json();\r\n                })\r\n                .then((data) => {\r\n                    let chartData =\r\n                        country === 'worldwide'\r\n                            ? buildChartData(data, casesType)\r\n                            : buildChartData(data.timeline, casesType);\r\n                    setData(chartData);\r\n                });\r\n        };\r\n        fetchData();\r\n\r\n        switch (casesType) {\r\n            case 'cases':\r\n                setchartColor({\r\n                    backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n                    borderColor: '#CC1034',\r\n                });\r\n                break;\r\n            case 'recovered':\r\n                setchartColor({\r\n                    backgroundColor: 'rgba(125, 215, 29, 0.5)',\r\n                    borderColor: '#7dd71d',\r\n                });\r\n                break;\r\n            case 'deaths':\r\n                setchartColor({\r\n                    backgroundColor: 'rgba(251, 68, 67, 0.5)',\r\n                    borderColor: '#fb4443',\r\n                });\r\n                break;\r\n            default:\r\n                setchartColor({\r\n                    backgroundColor: 'rgba(204, 16, 52, 0.5)',\r\n                    borderColor: '#CC1034',\r\n                });\r\n        }\r\n    }, [casesType, country]);\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length === 0 ? (\r\n                <div>\r\n                    <h4>Data is currently not available</h4>\r\n                </div>\r\n            ) : (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: chartColor.backgroundColor,\r\n                                borderColor: chartColor.borderColor,\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )}\r\n\r\n            {/* {data?.length > 0 && (\r\n                <Line\r\n                    data={{\r\n                        datasets: [\r\n                            {\r\n                                backgroundColor: chartColor.backgroundColor,\r\n                                borderColor: chartColor.borderColor,\r\n                                data: data,\r\n                            },\r\n                        ],\r\n                    }}\r\n                    options={options}\r\n                />\r\n            )} */}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport {\n    MenuItem,\n    FormControl,\n    Select,\n    Card,\n    CardContent,\n} from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport LineGraph from './LineGraph';\nimport { sortData, prettyPrintStat } from './utils';\nimport 'leaflet/dist/leaflet.css';\nimport './App.css';\n\nfunction App() {\n    const [countries, setCountries] = useState(['USA', 'UK', 'INDIA']);\n    const [country, setCountry] = useState('worldwide');\n    const [countryInfo, setCountryInfo] = useState({});\n    const [tableData, setTableData] = useState([]);\n    const [mapCenter, setmapCenter] = useState({\n        lat: 19.484793,\n        lng: 18.964633,\n    });\n    const [mapZoom, setMapZoom] = useState(2);\n    const [mapCountries, setMapCountries] = useState([]);\n    const [caseType, setCaseType] = useState('cases');\n    // useEffect runs code based on a given condition\n    // for the world wide option when first loading\n    useEffect(() => {\n        // The code inside here will run once when component load and not agin\n        // and also change when the variable inside [] changes\n        // if it blank it only load once component loads\n        fetch('https://disease.sh/v3/covid-19/all')\n            .then((response) => response.json())\n            .then((data) => {\n                setCountryInfo(data);\n            });\n    }, []);\n\n    // useEffect runs code based on a given condition\n    useEffect(() => {\n        // The code inside here will run once when component load and not agin\n        // and also change when the variable inside [] changes\n        // if it blank it only load once component loads\n        const getCountriesData = async () => {\n            await fetch(\n                'https://disease.sh/v3/covid-19/countries?allowNull=false'\n            )\n                .then((response) => response.json())\n                .then((data) => {\n                    const countries = data\n                        .filter((country) => country.countryInfo.iso2 !== null)\n                        .map((country) => ({\n                            name: country.country,\n                            value: country.countryInfo.iso2,\n                        }));\n\n                    const sortedData = sortData(data);\n                    setTableData(sortedData);\n                    setMapCountries(data);\n                    setCountries(countries);\n                });\n        };\n        getCountriesData();\n    }, []);\n\n    // onc country change\n    const onCountryChange = async (event) => {\n        const countryCode = event.target.value;\n\n        const url =\n            countryCode === 'worldwide'\n                ? 'https://disease.sh/v3/covid-19/all'\n                : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n        await fetch(url)\n            .then((response) => response.json())\n            .then((data) => {\n                // set world wide lat and lng ,zoom when no data\n                if (countryCode === 'worldwide') {\n                    setCountry('worldwide');\n                    setCountryInfo(data);\n                    setmapCenter({\n                        lat: 19.484793,\n                        lng: 18.964633,\n                    });\n                    setMapZoom(2);\n                }\n                // set world wide lat and lng ,zoom when there is data\n                else {\n                    setCountry(countryCode);\n\n                    // all of the data from country response\n                    setCountryInfo(data);\n                    setmapCenter([data.countryInfo.lat, data.countryInfo.long]);\n                    setMapZoom(4);\n                }\n            });\n    };\n\n    return (\n        <div className=\"app\">\n            <div className=\"app__left\">\n                {/* Header */}\n                <div className=\"app__header\">\n                    {/* Title and Select input dropdown field  */}\n                    <h1>COVID 19 TRACKER</h1>\n                    <FormControl className=\"app__dropdown\">\n                        <Select\n                            variant=\"outlined\"\n                            onChange={onCountryChange}\n                            value={country}\n                        >\n                            <MenuItem value=\"worldwide\">World Wide</MenuItem>\n                            {/* Loop through all the countries and show a dropdown list of option */}\n                            {countries.map((country) => (\n                                <MenuItem value={country.value}>\n                                    {country.name}\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </div>\n\n                {/* Info-boxes  */}\n                <div className=\"app__stats\">\n                    {/* Info-boxes title=\"Corona Virus Cases\"  */}\n                    <InfoBox\n                        isCases\n                        active={caseType === 'cases'}\n                        onClick={(e) => setCaseType('cases')}\n                        title=\"Coronavirus Cases\"\n                        cases={prettyPrintStat(countryInfo.todayCases)}\n                        total={prettyPrintStat(countryInfo.cases)}\n                    />\n\n                    {/* Info-boxes title = \" Corona Virus Recovered\" */}\n                    <InfoBox\n                        isRecovered\n                        active={caseType === 'recovered'}\n                        onClick={(e) => setCaseType('recovered')}\n                        title=\"Recovered\"\n                        cases={prettyPrintStat(countryInfo.todayRecovered)}\n                        total={prettyPrintStat(countryInfo.recovered)}\n                    />\n\n                    {/* Info-boxes title =\"Corona Virus Deaths\"  */}\n                    <InfoBox\n                        isDeaths\n                        active={caseType === 'deaths'}\n                        onClick={(e) => setCaseType('deaths')}\n                        title=\"Deaths\"\n                        cases={prettyPrintStat(countryInfo.todayDeaths)}\n                        total={prettyPrintStat(countryInfo.deaths)}\n                    />\n                </div>\n\n                {/* Map */}\n                <Map\n                    caseType={caseType}\n                    countries={mapCountries}\n                    center={mapCenter}\n                    zoom={mapZoom}\n                />\n            </div>\n            <Card className=\"app__right\">\n                <CardContent>\n                    {/* Tables */}\n                    <h3>Live Cases By Country</h3>\n                    <Table countries={tableData} />\n                    {/* Graph  */}\n                    <h3 className=\"app__graphTitle\">\n                        {country === 'worldwide'\n                            ? `Worldwide | New ${\n                                  caseType.charAt(0).toUpperCase() +\n                                  caseType.slice(1)\n                              }`\n                            : `${countryInfo.country} | New ${\n                                  caseType.charAt(0).toUpperCase() +\n                                  caseType.slice(1)\n                              }`}\n                    </h3>\n                    <LineGraph\n                        className=\"app__graph\"\n                        casesType={caseType}\n                        country={country}\n                    />\n                </CardContent>\n            </Card>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}